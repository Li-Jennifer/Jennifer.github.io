(window.webpackJsonp=window.webpackJsonp||[]).push([[93],{514:function(s,t,n){"use strict";n.r(t);var a=n(6),e=Object(a.a)({},(function(){var s=this,t=s._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("Learn Python in y minutes"),t("a",{attrs:{href:"https://learnxinyminutes.com/docs/python/",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://learnxinyminutes.com/docs/python/"),t("OutboundLink")],1)]),s._v(" "),t("div",{staticClass:"language-python line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-python"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Single line comments start with a number symbol.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('""" Multiline strings can be written\n    using three "s, and are often used\n    as documentation.\n"""')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("####################################################")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 1. Primitive Datatypes and Operators")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("####################################################")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You have numbers")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 3")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Math is what you would expect")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 7")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 20")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("35")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 7.0")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Integer division rounds down for both positive and negative numbers.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => -2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.0")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 1.0 # works on floats too")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("//")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.0")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => -2.0")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The result of division is always a float")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 3.3333333333333335")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Modulo operation")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# i % j have the same sign as j, unlike C")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("%")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 2")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Exponentiation (x**y, x to the yth power)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 8")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Enforce precedence with parentheses")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 7")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 8")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Boolean values are primitives (Note: the capitalization)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# negate with not")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Boolean Operators")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Note "and" and "or" are case-sensitive')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# True and False are actually 1 and 0 but with different keywords")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 2")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 8")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => -5")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Comparison operators look at the numerical value of True and False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# None, 0, and empty strings/lists/dicts/tuples/sets all evaluate to False.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# All other values are True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Using boolean logical operators on ints casts them to booleans for evaluation, but their non-cast value is returned")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Don't mix up with bool(ints) and bitwise and/or (&,|)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("or")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => -5")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Equality is ==")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Inequality is !=")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# More comparisons")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Seeing whether a value is in a range")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("and")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Chaining makes this look nicer")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# (is vs. ==) is checks if two variables refer to the same object, but == checks")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# if the objects pointed to have the same values.")]),s._v("\na "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Point a at a new list, [1, 2, 3, 4]")]),s._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" a             "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Point b at what a is pointing to")]),s._v("\nb "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" a            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True, a and b refer to the same object")]),s._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" a            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True, a's and b's objects are equal")]),s._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Point b at a new list, [1, 2, 3, 4]")]),s._v("\nb "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" a            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False, a and b do not refer to the same object")]),s._v("\nb "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" a            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True, a's and b's objects are equal")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Strings are created with \" or '")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This is a string."')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'This is also a string.'")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Strings can be added too")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"world!"')]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "Hello world!"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# String literals (but not variables) can be concatenated without using '+'")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello "')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"world!"')]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "Hello world!"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# A string can be treated like a list of characters")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello world!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 'H'")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can find the length of a string")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This is a string"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 16")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can also format using f-strings or formatted string literals (in Python 3.6+)")]),s._v("\nname "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Reiko"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string-interpolation"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('f"She said her name is ')]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('."')])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "She said her name is Reiko"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can basically put any Python expression inside the braces and it will be output in the string.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string-interpolation"}},[t("span",{pre:!0,attrs:{class:"token string"}},[s._v('f"')]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v(" is ")]),t("span",{pre:!0,attrs:{class:"token interpolation"}},[t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")])]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v(' characters long."')])]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "Reiko is 5 characters long."')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# None is an object")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => None")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Don\'t use the equality "==" symbol to compare objects to None')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Use "is" instead. This checks for equality of object identity.')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"etc"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("None")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# None, 0, and empty strings/lists/dicts/tuples/sets all evaluate to False.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# All other values are True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("bool")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("####################################################")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 2. Variables and Collections")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("####################################################")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Python has a print function")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I\'m Python. Nice to meet you!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => I'm Python. Nice to meet you!")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# By default the print function also prints out a newline at the end.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Use the optional argument end to change the end string.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello, World"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" end"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => Hello, World!")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Simple way to get input data from console")]),s._v("\ninput_string_var "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("input")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Enter some data: "')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Returns the data as a string")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# There are no declarations, only assignments.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Convention is to use lower_case_with_underscores")]),s._v("\nsome_var "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\nsome_var  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 5")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Accessing a previously unassigned variable is an exception.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# See Control Flow to learn more about exception handling.")]),s._v("\nsome_unknown_var  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Raises a NameError")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# if can be used as an expression")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Equivalent of C's '?:' ternary operator")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"yay!"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"nay!"')]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "nay!"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Lists store sequences")]),s._v("\nli "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can start with a prefilled list")]),s._v("\nother_li "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Add stuff to the end of a list with append")]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("append"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# li is now [1]")]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("append"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# li is now [1, 2]")]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("append"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# li is now [1, 2, 4]")]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("append"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# li is now [1, 2, 4, 3]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Remove from the end with pop")]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("pop"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 3 and li is now [1, 2, 4]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Let's put it back")]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("append"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# li is now [1, 2, 4, 3] again.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Access a list like you would any array")]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Look at the last element")]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 3")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Looking out of bounds is an IndexError")]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Raises an IndexError")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can look at ranges with slice syntax.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The start index is included, the end index is not")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# (It's a closed/open range for you mathy types.)")]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Return list from index 1 to 3 => [2, 4]")]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Return list starting from index 2 => [4, 3]")]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Return list from beginning until index 3  => [1, 2, 4]")]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Return list selecting every second entry => [1, 4]")]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Return list in reverse order => [3, 4, 2, 1]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Use any combination of these to make advanced slices")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# li[start:end:step]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Make a one layer deep copy using slices")]),s._v("\nli2 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" li"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => li2 = [1, 2, 4, 3] but (li2 is li) will result in false.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Remove arbitrary elements from a list with "del"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("del")]),s._v(" li"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# li is now [1, 2, 3]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Remove first occurrence of a value")]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("remove"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# li is now [1, 3]")]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("remove"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Raises a ValueError as 2 is not in the list")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Insert an element at a specific index")]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("insert"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# li is now [1, 2, 3] again")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Get the index of the first item found matching the argument")]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 1")]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("index"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Raises a ValueError as 4 is not in the list")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can add lists")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Note: values for li and for other_li are not modified.")]),s._v("\nli "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" other_li  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => [1, 2, 3, 4, 5, 6]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Concatenate lists with "extend()"')]),s._v("\nli"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("extend"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("other_li"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Now li is [1, 2, 3, 4, 5, 6]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Check for existence in a list with "in"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" li  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Examine the length with "len()"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("li"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 6")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Tuples are like lists but are immutable.")]),s._v("\ntup "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\ntup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 1")]),s._v("\ntup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Raises a TypeError")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Note that a tuple of length one has to have a comma after the last element but")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# tuples of other lengths, even zero, do not.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => <class 'int'>")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => <class 'tuple'>")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => <class 'tuple'>")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can do most of the list operations on tuples too")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("len")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("tup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 3")]),s._v("\ntup "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => (1, 2, 3, 4, 5, 6)")]),s._v("\ntup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => (1, 2)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" tup         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can unpack tuples (or lists) into variables")]),s._v("\na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a is now 1, b is now 2 and c is now 3")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can also do extended unpacking")]),s._v("\na"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# a is now 1, b is now [2, 3] and c is now 4")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Tuples are created by default if you leave out the parentheses")]),s._v("\nd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" f "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# tuple 4, 5, 6 is unpacked into variables d, e and f")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# respectively such that d = 4, e = 5 and f = 6")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Now look how easy it is to swap two values")]),s._v("\ne"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" d "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" d"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" e  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# d is now 5 and e is now 4")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Dictionaries store mappings from keys to values")]),s._v("\nempty_dict "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Here is a prefilled dictionary")]),s._v("\nfilled_dict "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"one"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"two"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"three"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Note keys for dictionaries have to be immutable types. This is to ensure that")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# the key can be converted to a constant hash value for quick look-ups.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Immutable types include ints, floats, strings, tuples.")]),s._v("\ninvalid_dict "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"123"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => Raises a TypeError: unhashable type: 'list'")]),s._v("\nvalid_dict "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Values can be of any type, however.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Look up values with []")]),s._v("\nfilled_dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"one"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 1")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Get all keys as an iterable with "keys()". We need to wrap the call in list()')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# to turn it into a list. We'll talk about those later.  Note - for Python")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# versions <3.7, dictionary key ordering is not guaranteed. Your results might")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# not match the example below exactly. However, as of Python 3.7, dictionary")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# items maintain the order at which they are inserted into the dictionary.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("list")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("filled_dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("keys"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => ["three", "two", "one"] in Python <3.7')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("list")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("filled_dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("keys"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => ["one", "two", "three"] in Python 3.7+')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Get all values as an iterable with "values()". Once again we need to wrap it')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# in list() to get it out of the iterable. Note - Same as above regarding key")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# ordering.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("list")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("filled_dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("values"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => [3, 2, 1]  in Python <3.7")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("list")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("filled_dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("values"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => [1, 2, 3] in Python 3.7+")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Check for existence of keys in a dictionary with "in"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"one"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" filled_dict  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" filled_dict      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Looking up a non-existing key is a KeyError")]),s._v("\nfilled_dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"four"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# KeyError")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Use "get()" method to avoid the KeyError')]),s._v("\nfilled_dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"one"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("      "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 1")]),s._v("\nfilled_dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"four"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => None")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The get method supports a default argument when the value is missing")]),s._v("\nfilled_dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"one"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 1")]),s._v("\nfilled_dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"four"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 4")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "setdefault()" inserts into a dictionary only if the given key isn\'t present')]),s._v("\nfilled_dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("setdefault"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"five"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# filled_dict["five"] is set to 5')]),s._v("\nfilled_dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("setdefault"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"five"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# filled_dict["five"] is still 5')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Adding to a dictionary")]),s._v("\nfilled_dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("update"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"four"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => {"one": 1, "two": 2, "three": 3, "four": 4}')]),s._v("\nfilled_dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"four"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# another way to add to dict")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Remove keys from a dictionary with del")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("del")]),s._v(" filled_dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"one"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Removes the key "one" from filled dict')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# From Python 3.5 you can also use the additional unpacking options")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => {'a': 1, 'b': 2}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => {'a': 2}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Sets store ... well sets")]),s._v("\nempty_set "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("set")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Initialize a set with a bunch of values. Yeah, it looks a bit like a dict. Sorry.")]),s._v("\nsome_set "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# some_set is now {1, 2, 3, 4}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Similar to keys of a dictionary, elements of a set have to be immutable.")]),s._v("\ninvalid_set "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => Raises a TypeError: unhashable type: 'list'")]),s._v("\nvalid_set "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Add one more item to the set")]),s._v("\nfilled_set "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" some_set\nfilled_set"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("add"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# filled_set is now {1, 2, 3, 4, 5}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Sets do not have duplicate elements")]),s._v("\nfilled_set"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("add"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# it remains as before {1, 2, 3, 4, 5}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Do set intersection with &")]),s._v("\nother_set "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nfilled_set "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" other_set  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => {3, 4, 5}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Do set union with |")]),s._v("\nfilled_set "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" other_set  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => {1, 2, 3, 4, 5, 6}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Do set difference with -")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => {1, 4}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Do set symmetric difference with ^")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("^")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => {1, 4, 5}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Check if set on the left is a superset of set on the right")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Check if set on the left is a subset of set on the right")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Check for existence in a set with in")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" filled_set   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" filled_set  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Make a one layer deep copy")]),s._v("\nfilled_set "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" some_set"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("copy"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# filled_set is {1, 2, 3, 4, 5}")]),s._v("\nfilled_set "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" some_set        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => False")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("####################################################")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 3. Control Flow and Iterables")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("####################################################")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Let's just make a variable")]),s._v("\nsome_var "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Here is an if statement. Indentation is significant in Python!")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Convention is to use four spaces, not tabs.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# This prints "some_var is smaller than 10"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" some_var "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"some_var is totally bigger than 10."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("elif")]),s._v(" some_var "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This elif clause is optional.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"some_var is smaller than 10."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("                  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This is optional too.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"some_var is indeed 10."')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\nFor loops iterate over lists\nprints:\n    dog is a mammal\n    cat is a mammal\n    mouse is a mammal\n"""')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" animal "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dog"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cat"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mouse"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can use format() to interpolate formatted strings")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{} is a mammal"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("format")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("animal"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\n"range(number)" returns an iterable of numbers\nfrom zero to the given number\nprints:\n    0\n    1\n    2\n    3\n"""')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\n"range(lower, upper)" returns an iterable of numbers\nfrom the lower number to the upper number\nprints:\n    4\n    5\n    6\n    7\n"""')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\n"range(lower, upper, step)" returns an iterable of numbers\nfrom the lower number to the upper number, while incrementing\nby step. If step is not indicated, the default value is 1.\nprints:\n    4\n    6\n"""')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\nTo loop over a list, and retrieve both the index and the value of each item in the list\nprints:\n    0 dog\n    1 cat\n    2 mouse\n"""')]),s._v("\nanimals "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"dog"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"cat"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"mouse"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("enumerate")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("animals"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" value"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\nWhile loops go until a condition is no longer met.\nprints:\n    0\n    1\n    2\n    3\n"""')]),s._v("\nx "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Shorthand for x = x + 1")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Handle exceptions with a try/except block")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Use "raise" to raise an error')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("raise")]),s._v(" IndexError"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"This is an index error"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("except")]),s._v(" IndexError "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" e"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pass")]),s._v("                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Pass is just a no-op. Usually you would do recovery here.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("except")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("TypeError"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" NameError"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("pass")]),s._v("                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Multiple exceptions can be handled together, if required.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("                    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Optional clause to the try/except block. Must follow all except blocks")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"All good!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Runs only if the code in try raises no exceptions")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("finally")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Execute under all circumstances")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"We can clean up resources here"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Instead of try/finally to cleanup resources you can use a with statement")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("open")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"myfile.txt"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" f"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" line "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" f"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("line"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Writing to a file")]),s._v("\ncontents "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"aa"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bb"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("open")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"myfile1.txt"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"w+"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("write"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("str")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("contents"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# writes a string to a file")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("open")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"myfile2.txt"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"w+"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("write"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("json"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("dumps"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("contents"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# writes an object to a file")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Reading from a file")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("open")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'myfile1.txt'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"r+"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    contents "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("read"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# reads a string from a file")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("contents"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# print: {"aa": 12, "bb": 21}')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("open")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'myfile2.txt'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"r+"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    contents "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" json"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("load"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("file")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# reads a json object from a file")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("contents"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# print: {"aa": 12, "bb": 21}')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Python offers a fundamental abstraction called the Iterable.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# An iterable is an object that can be treated as a sequence.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The object returned by the range function, is an iterable.")]),s._v("\n\nfilled_dict "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"one"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"two"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"three"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nour_iterable "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" filled_dict"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("keys"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("our_iterable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => dict_keys(['one', 'two', 'three']). This is an object that implements our Iterable interface.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# We can loop over it.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" our_iterable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Prints one, two, three")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# However we cannot address elements by index.")]),s._v("\nour_iterable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Raises a TypeError")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# An iterable is an object that knows how to create an iterator.")]),s._v("\nour_iterator "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("iter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("our_iterable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Our iterator is an object that can remember the state as we traverse through it.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# We get the next object with "next()".')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("our_iterator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "one"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# It maintains state as we iterate.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("our_iterator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "two"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("our_iterator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "three"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# After the iterator has returned all of its data, it raises a StopIteration exception")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("next")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("our_iterator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Raises StopIteration")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# We can also loop over it, in fact, "for" does this implicitly!')]),s._v("\nour_iterator "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("iter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("our_iterable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" our_iterator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Prints one, two, three")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can grab all the elements of an iterable or iterator by calling list() on it.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("list")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("our_iterable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => Returns ["one", "two", "three"]')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("list")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("our_iterator"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => Returns [] because state is saved")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("####################################################")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 4. Functions")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("####################################################")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# Use "def" to create new functions')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"x is {} and y is {}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("format")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" y  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Return values with a return statement")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Calling functions with parameters")]),s._v("\nadd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => prints out "x is 5 and y is 6" and returns 11')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Another way to call functions is with keyword arguments")]),s._v("\nadd"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("y"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Keyword arguments can arrive in any order.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can define functions that take a variable number of")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# positional arguments")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("varargs")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" args\n\nvarargs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => (1, 2, 3)")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can define functions that take a variable number of")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# keyword arguments, as well")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("keyword_args")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),s._v("kwargs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" kwargs\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Let's call it to see what happens")]),s._v("\nkeyword_args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("big"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"foot"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" loch"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"ness"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => {"big": "foot", "loch": "ness"}')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can do both at once, if you like")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("all_the_args")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),s._v("kwargs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("kwargs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token triple-quoted-string string"}},[s._v('"""\nall_the_args(1, 2, a=3, b=4) prints:\n    (1, 2)\n    {"a": 3, "b": 4}\n"""')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# When calling functions, you can do the opposite of args/kwargs!")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Use * to expand tuples and use ** to expand kwargs.")]),s._v("\nargs "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nkwargs "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"a"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nall_the_args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# equivalent to all_the_args(1, 2, 3, 4)")]),s._v("\nall_the_args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),s._v("kwargs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# equivalent to all_the_args(a=3, b=4)")]),s._v("\nall_the_args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),s._v("kwargs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# equivalent to all_the_args(1, 2, 3, 4, a=3, b=4)")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Returning multiple values (with tuple assignments)")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("swap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Return multiple values as a tuple without the parenthesis.")]),s._v("\n                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# (Note: parenthesis have been excluded but can be included)")]),s._v("\n\nx "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\ny "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v("\nx"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" swap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => x = 2, y = 1")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# (x, y) = swap(x,y)  # Again parenthesis have been excluded but can be included.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Function Scope")]),s._v("\nx "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("set_x")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Local var x not the same as global variable x")]),s._v("\n    x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" num    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 43")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 43")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("set_global_x")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("num"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("global")]),s._v(" x\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 5")]),s._v("\n    x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" num    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# global var x is now set to 6")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 6")]),s._v("\n\nset_x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("43")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nset_global_x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Python has first class functions")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("create_adder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("adder")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" y\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" adder\n\nadd_10 "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" create_adder"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\nadd_10"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 13")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# There are also anonymous functions")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("lambda")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("lambda")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" y "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 5")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# There are built-in higher order functions")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("list")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("map")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("add_10"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => [11, 12, 13]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("list")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("map")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("max")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => [4, 2, 3]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("list")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("filter")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("lambda")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => [6, 7]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# We can use list comprehensions for nice maps and filters")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# List comprehension stores the output as a list which can itself be a nested list")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("add_10"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("         "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => [11, 12, 13]")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("x "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => [6, 7]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can construct set and dict comprehensions as well.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("x "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abcddeef'")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("not")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'abc'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => {'d', 'e', 'f'}")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" x"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => {0: 0, 1: 1, 2: 4, 3: 9, 4: 16}")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("####################################################")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 5. Modules")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("####################################################")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can import modules")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" math\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("math"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sqrt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 4.0")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can get specific functions from a module")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" math "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" ceil"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" floor\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("ceil"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("   "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 4.0")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("floor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.7")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 3.0")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can import all functions from a module.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Warning: this is not recommended")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" math "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can shorten module names")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" math "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("as")]),s._v(" m\nmath"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sqrt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" m"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sqrt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => True")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Python modules are just ordinary Python files. You")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# can write your own, and import them. The name of the")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# module is the same as the name of the file.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can find out which functions and attributes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# are defined in a module.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" math\n"),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("dir")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("math"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# If you have a Python script named math.py in the same")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# folder as your current script, the file math.py will")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# be loaded instead of the built-in Python module.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This happens because the local folder has priority")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# over Python's built-in libraries.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("####################################################")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 6. Classes")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("####################################################")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# We use the "class" statement to create a class')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Human")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# A class attribute. It is shared by all instances of this class")]),s._v("\n    species "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"H. sapiens"')]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Basic initializer, this is called when this class is instantiated.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Note that the double leading and trailing underscores denote objects")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# or attributes that are used by Python but that live in user-controlled")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# namespaces. Methods(or objects or attributes) like: __init__, __str__,")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# __repr__ etc. are called special methods (or sometimes called dunder methods)")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You should not invent such names on your own.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("__init__")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Assign the argument to the instance's name attribute")]),s._v("\n        self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" name\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Initialize property")]),s._v("\n        self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("_age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# An instance method. All methods take "self" as the first argument')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("say")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{name}: {message}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("format")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" message"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Another instance method")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sing")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'yo... yo... microphone check... one two... one two...'")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# A class method is shared among all instances")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# They are called with the calling class as the first argument")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@classmethod")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("get_species")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("cls"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" cls"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("species\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# A static method is called without a class or instance reference")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@staticmethod")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grunt")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"*grunt*"')]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# A property is just like a getter.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# It turns the method age() into a read-only attribute of the same name.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# There's no need to write trivial getters and setters in Python, though.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@property")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("age")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("_age\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This allows the property to be set")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("setter")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("age")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("_age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" age\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This allows the property to be deleted")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("deleter")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("age")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("del")]),s._v(" self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("_age\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# When a Python interpreter reads a source file it executes all its code.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This __name__ check makes sure this code block is only executed when this")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# module is the main program.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" __name__ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'__main__'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Instantiate a class")]),s._v("\n    i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Human"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Ian"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("say"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hi"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                     "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "Ian: hi"')]),s._v("\n    j "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Human"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Joel"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("say"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "Joel: hello"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# i and j are instances of type Human, or in other words: they are Human objects")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Call our class method")]),s._v("\n    i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("say"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get_species"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "Ian: H. sapiens"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Change the shared attribute")]),s._v("\n    Human"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("species "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"H. neanderthalensis"')]),s._v("\n    i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("say"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get_species"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "Ian: H. neanderthalensis"')]),s._v("\n    j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("say"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get_species"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "Joel: H. neanderthalensis"')]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Call the static method")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Human"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("grunt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "*grunt*"')]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Static methods can be called by instances too")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("grunt"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "*grunt*"')]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Update the property for this instance")]),s._v("\n    i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("42")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Get the property")]),s._v("\n    i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("say"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "Ian: 42"')]),s._v("\n    j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("say"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("j"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# => "Joel: 0"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Delete the property")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("del")]),s._v(" i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# i.age                         # => this would raise an AttributeError")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("####################################################")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 6.1 Inheritance")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("####################################################")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Inheritance allows new child classes to be defined that inherit methods and")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# variables from their parent class.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Using the Human class defined above as the base or parent class, we can")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# define a child class, Superhero, which inherits the class variables like")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# "species", "name", and "age", as well as methods, like "sing" and "grunt"')]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# from the Human class, but can also have its own unique properties.")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# To take advantage of modularization by file you could place the classes above in their own files,")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# say, human.py")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# To import functions from other files use the following format")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# from "filename-without-extension" import "function-or-class"')]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" human "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" Human\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Specify the parent class(es) as parameters to the class definition")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Superhero")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Human"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# If the child class should inherit all of the parent's definitions without")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# any modifications, you can just use the "pass" keyword (and nothing else)')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# but in this case it is commented out to allow for a unique child class:")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# pass")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Child classes can override their parents' attributes")]),s._v("\n    species "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Superhuman'")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Children automatically inherit their parent class's constructor including")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# its arguments, but can also define additional arguments or definitions")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# and override its methods such as the class constructor.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# This constructor inherits the "name" argument from the "Human" class and')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# adds the "superpower" and "movie" arguments:')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("__init__")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" movie"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                 superpowers"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"super strength"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"bulletproofing"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# add additional class attributes:")]),s._v("\n        self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("fictional "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),s._v("\n        self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("movie "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" movie\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# be aware of mutable default values, since defaults are shared")]),s._v("\n        self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("superpowers "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" superpowers\n\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# The "super" function lets you access the parent class\'s methods')]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# that are overridden by the child, in this case, the __init__ method.")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This calls the parent class constructor:")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("super")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__init__"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# override the sing method")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sing")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Dun, dun, DUN!'")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# add an additional instance method")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("boast")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" power "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("superpowers"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"I wield the power of {pow}!"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("format")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("pow")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("power"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" __name__ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'__main__'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    sup "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Superhero"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("name"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Tick"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Instance type checks")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("isinstance")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Human"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I am human'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("type")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("is")]),s._v(" Superhero"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I am a superhero'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Get the Method Resolution search Order used by both getattr() and super()")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This attribute is dynamic and can be updated")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Superhero"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__mro__"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => (<class '__main__.Superhero'>,")]),s._v("\n                                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => <class 'human.Human'>, <class 'object'>)")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Calls parent method but uses its own class attribute")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get_species"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => Superhuman")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Calls overridden method")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sing"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => Dun, dun, DUN!")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Calls method from Human")]),s._v("\n    sup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("say"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Spoon'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("            "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => Tick: Spoon")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Call method that exists only in Superhero")]),s._v("\n    sup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("boast"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => I wield the power of super strength!")]),s._v("\n                                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => I wield the power of bulletproofing!")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Inherited class attribute")]),s._v("\n    sup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("31")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 31")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Attribute that only exists within Superhero")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Am I Oscar eligible? '")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("str")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("movie"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("####################################################")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 6.2 Multiple Inheritance")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("####################################################")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Another class definition")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# bat.py")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Bat")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\n    species "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Baty'")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("__init__")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" can_fly"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("fly "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" can_fly\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This class also has a say method")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("say")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        msg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'... ... ...'")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" msg\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# And its own method as well")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sonar")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'))) ... ((('")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" __name__ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'__main__'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    b "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Bat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("say"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'hello'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("fly"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# And yet another class definition that inherits from Superhero and Bat")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# superhero.py")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" superhero "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" Superhero\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" bat "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" Bat\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Define Batman as a child that inherits from both Superhero and Bat")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Batman")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Superhero"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Bat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("__init__")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),s._v("kwargs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Typically to inherit attributes you have to call super:")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# super(Batman, self).__init__(*args, **kwargs)")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# However we are dealing with multiple inheritance here, and super()")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# only works with the next base class in the MRO list.")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# So instead we explicitly call __init__ for all ancestors.")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# The use of *args and **kwargs allows for a clean way to pass arguments,")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v('# with each parent "peeling a layer of the onion".')]),s._v("\n        Superhero"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__init__"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'anonymous'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" movie"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n                           superpowers"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Wealthy'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),s._v("kwargs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        Bat"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__init__"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" can_fly"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),s._v("kwargs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# override the value for the name attribute")]),s._v("\n        self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Sad Affleck'")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("sing")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("self"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'nan nan nan nan nan batman!'")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" __name__ "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'__main__'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    sup "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Batman"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Get the Method Resolution search Order used by both getattr() and super().")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# This attribute is dynamic and can be updated")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Batman"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("__mro__"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("       "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => (<class '__main__.Batman'>,")]),s._v("\n                                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => <class 'superhero.Superhero'>,")]),s._v("\n                                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => <class 'human.Human'>,")]),s._v("\n                                "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => <class 'bat.Bat'>, <class 'object'>)")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Calls parent method but uses its own class attribute")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("get_species"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => Superhuman")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Calls overridden method")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sing"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("           "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => nan nan nan nan nan batman!")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Calls method from Human, because inheritance order matters")]),s._v("\n    sup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("say"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'I agree'")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => Sad Affleck: I agree")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Call method that exists only in 2nd ancestor")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("sonar"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("          "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => ))) ... (((")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Inherited class attribute")]),s._v("\n    sup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("age"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("              "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => 100")]),s._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Inherited attribute from 2nd ancestor whose default value was overridden.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'Can I fly? '")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("str")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("sup"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("fly"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => Can I fly? False")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("####################################################")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("## 7. Advanced")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("####################################################")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Generators help you make lazy code.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("double_numbers")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("iterable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" iterable"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("yield")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" i\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Generators are memory-efficient because they only load the data needed to")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# process the next value in the iterable. This allows them to perform")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# operations on otherwise prohibitively large value ranges.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# NOTE: `range` replaces `xrange` in Python 3.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" double_numbers"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("range")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("900000000")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# `range` is a generator.")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" i "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("30")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("break")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Just as you can create a list comprehension, you can create generator")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# comprehensions as well.")]),s._v("\nvalues "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("x "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" values"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# prints -1 -2 -3 -4 -5 to console/terminal")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# You can also cast a generator comprehension directly to a list.")]),s._v("\nvalues "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("x "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" x "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\ngen_to_list "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("list")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("values"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("gen_to_list"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# => [-1, -2, -3, -4, -5]")]),s._v("\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Decorators")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# In this example `beg` wraps `say`. If say_please is True then it")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# will change the returned message.")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("from")]),s._v(" functools "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("import")]),s._v(" wraps\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("beg")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("target_function"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@wraps")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("target_function"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("wrapper")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),s._v("kwargs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n        msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" say_please "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" target_function"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("**")]),s._v("kwargs"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" say_please"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{} {}"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("format")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Please! I am poor :("')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" msg\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" wrapper\n\n"),t("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[s._v("@beg")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("def")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("say")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("say_please"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("False")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v("\n    msg "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Can you buy me a beer?"')]),s._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" msg"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" say_please\n\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("say"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("                 "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Can you buy me a beer?")]),s._v("\n"),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("print")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("say"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("say_please"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("True")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[s._v("# Can you buy me a beer? Please! I am poor :(")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br"),t("span",{staticClass:"line-number"},[s._v("43")]),t("br"),t("span",{staticClass:"line-number"},[s._v("44")]),t("br"),t("span",{staticClass:"line-number"},[s._v("45")]),t("br"),t("span",{staticClass:"line-number"},[s._v("46")]),t("br"),t("span",{staticClass:"line-number"},[s._v("47")]),t("br"),t("span",{staticClass:"line-number"},[s._v("48")]),t("br"),t("span",{staticClass:"line-number"},[s._v("49")]),t("br"),t("span",{staticClass:"line-number"},[s._v("50")]),t("br"),t("span",{staticClass:"line-number"},[s._v("51")]),t("br"),t("span",{staticClass:"line-number"},[s._v("52")]),t("br"),t("span",{staticClass:"line-number"},[s._v("53")]),t("br"),t("span",{staticClass:"line-number"},[s._v("54")]),t("br"),t("span",{staticClass:"line-number"},[s._v("55")]),t("br"),t("span",{staticClass:"line-number"},[s._v("56")]),t("br"),t("span",{staticClass:"line-number"},[s._v("57")]),t("br"),t("span",{staticClass:"line-number"},[s._v("58")]),t("br"),t("span",{staticClass:"line-number"},[s._v("59")]),t("br"),t("span",{staticClass:"line-number"},[s._v("60")]),t("br"),t("span",{staticClass:"line-number"},[s._v("61")]),t("br"),t("span",{staticClass:"line-number"},[s._v("62")]),t("br"),t("span",{staticClass:"line-number"},[s._v("63")]),t("br"),t("span",{staticClass:"line-number"},[s._v("64")]),t("br"),t("span",{staticClass:"line-number"},[s._v("65")]),t("br"),t("span",{staticClass:"line-number"},[s._v("66")]),t("br"),t("span",{staticClass:"line-number"},[s._v("67")]),t("br"),t("span",{staticClass:"line-number"},[s._v("68")]),t("br"),t("span",{staticClass:"line-number"},[s._v("69")]),t("br"),t("span",{staticClass:"line-number"},[s._v("70")]),t("br"),t("span",{staticClass:"line-number"},[s._v("71")]),t("br"),t("span",{staticClass:"line-number"},[s._v("72")]),t("br"),t("span",{staticClass:"line-number"},[s._v("73")]),t("br"),t("span",{staticClass:"line-number"},[s._v("74")]),t("br"),t("span",{staticClass:"line-number"},[s._v("75")]),t("br"),t("span",{staticClass:"line-number"},[s._v("76")]),t("br"),t("span",{staticClass:"line-number"},[s._v("77")]),t("br"),t("span",{staticClass:"line-number"},[s._v("78")]),t("br"),t("span",{staticClass:"line-number"},[s._v("79")]),t("br"),t("span",{staticClass:"line-number"},[s._v("80")]),t("br"),t("span",{staticClass:"line-number"},[s._v("81")]),t("br"),t("span",{staticClass:"line-number"},[s._v("82")]),t("br"),t("span",{staticClass:"line-number"},[s._v("83")]),t("br"),t("span",{staticClass:"line-number"},[s._v("84")]),t("br"),t("span",{staticClass:"line-number"},[s._v("85")]),t("br"),t("span",{staticClass:"line-number"},[s._v("86")]),t("br"),t("span",{staticClass:"line-number"},[s._v("87")]),t("br"),t("span",{staticClass:"line-number"},[s._v("88")]),t("br"),t("span",{staticClass:"line-number"},[s._v("89")]),t("br"),t("span",{staticClass:"line-number"},[s._v("90")]),t("br"),t("span",{staticClass:"line-number"},[s._v("91")]),t("br"),t("span",{staticClass:"line-number"},[s._v("92")]),t("br"),t("span",{staticClass:"line-number"},[s._v("93")]),t("br"),t("span",{staticClass:"line-number"},[s._v("94")]),t("br"),t("span",{staticClass:"line-number"},[s._v("95")]),t("br"),t("span",{staticClass:"line-number"},[s._v("96")]),t("br"),t("span",{staticClass:"line-number"},[s._v("97")]),t("br"),t("span",{staticClass:"line-number"},[s._v("98")]),t("br"),t("span",{staticClass:"line-number"},[s._v("99")]),t("br"),t("span",{staticClass:"line-number"},[s._v("100")]),t("br"),t("span",{staticClass:"line-number"},[s._v("101")]),t("br"),t("span",{staticClass:"line-number"},[s._v("102")]),t("br"),t("span",{staticClass:"line-number"},[s._v("103")]),t("br"),t("span",{staticClass:"line-number"},[s._v("104")]),t("br"),t("span",{staticClass:"line-number"},[s._v("105")]),t("br"),t("span",{staticClass:"line-number"},[s._v("106")]),t("br"),t("span",{staticClass:"line-number"},[s._v("107")]),t("br"),t("span",{staticClass:"line-number"},[s._v("108")]),t("br"),t("span",{staticClass:"line-number"},[s._v("109")]),t("br"),t("span",{staticClass:"line-number"},[s._v("110")]),t("br"),t("span",{staticClass:"line-number"},[s._v("111")]),t("br"),t("span",{staticClass:"line-number"},[s._v("112")]),t("br"),t("span",{staticClass:"line-number"},[s._v("113")]),t("br"),t("span",{staticClass:"line-number"},[s._v("114")]),t("br"),t("span",{staticClass:"line-number"},[s._v("115")]),t("br"),t("span",{staticClass:"line-number"},[s._v("116")]),t("br"),t("span",{staticClass:"line-number"},[s._v("117")]),t("br"),t("span",{staticClass:"line-number"},[s._v("118")]),t("br"),t("span",{staticClass:"line-number"},[s._v("119")]),t("br"),t("span",{staticClass:"line-number"},[s._v("120")]),t("br"),t("span",{staticClass:"line-number"},[s._v("121")]),t("br"),t("span",{staticClass:"line-number"},[s._v("122")]),t("br"),t("span",{staticClass:"line-number"},[s._v("123")]),t("br"),t("span",{staticClass:"line-number"},[s._v("124")]),t("br"),t("span",{staticClass:"line-number"},[s._v("125")]),t("br"),t("span",{staticClass:"line-number"},[s._v("126")]),t("br"),t("span",{staticClass:"line-number"},[s._v("127")]),t("br"),t("span",{staticClass:"line-number"},[s._v("128")]),t("br"),t("span",{staticClass:"line-number"},[s._v("129")]),t("br"),t("span",{staticClass:"line-number"},[s._v("130")]),t("br"),t("span",{staticClass:"line-number"},[s._v("131")]),t("br"),t("span",{staticClass:"line-number"},[s._v("132")]),t("br"),t("span",{staticClass:"line-number"},[s._v("133")]),t("br"),t("span",{staticClass:"line-number"},[s._v("134")]),t("br"),t("span",{staticClass:"line-number"},[s._v("135")]),t("br"),t("span",{staticClass:"line-number"},[s._v("136")]),t("br"),t("span",{staticClass:"line-number"},[s._v("137")]),t("br"),t("span",{staticClass:"line-number"},[s._v("138")]),t("br"),t("span",{staticClass:"line-number"},[s._v("139")]),t("br"),t("span",{staticClass:"line-number"},[s._v("140")]),t("br"),t("span",{staticClass:"line-number"},[s._v("141")]),t("br"),t("span",{staticClass:"line-number"},[s._v("142")]),t("br"),t("span",{staticClass:"line-number"},[s._v("143")]),t("br"),t("span",{staticClass:"line-number"},[s._v("144")]),t("br"),t("span",{staticClass:"line-number"},[s._v("145")]),t("br"),t("span",{staticClass:"line-number"},[s._v("146")]),t("br"),t("span",{staticClass:"line-number"},[s._v("147")]),t("br"),t("span",{staticClass:"line-number"},[s._v("148")]),t("br"),t("span",{staticClass:"line-number"},[s._v("149")]),t("br"),t("span",{staticClass:"line-number"},[s._v("150")]),t("br"),t("span",{staticClass:"line-number"},[s._v("151")]),t("br"),t("span",{staticClass:"line-number"},[s._v("152")]),t("br"),t("span",{staticClass:"line-number"},[s._v("153")]),t("br"),t("span",{staticClass:"line-number"},[s._v("154")]),t("br"),t("span",{staticClass:"line-number"},[s._v("155")]),t("br"),t("span",{staticClass:"line-number"},[s._v("156")]),t("br"),t("span",{staticClass:"line-number"},[s._v("157")]),t("br"),t("span",{staticClass:"line-number"},[s._v("158")]),t("br"),t("span",{staticClass:"line-number"},[s._v("159")]),t("br"),t("span",{staticClass:"line-number"},[s._v("160")]),t("br"),t("span",{staticClass:"line-number"},[s._v("161")]),t("br"),t("span",{staticClass:"line-number"},[s._v("162")]),t("br"),t("span",{staticClass:"line-number"},[s._v("163")]),t("br"),t("span",{staticClass:"line-number"},[s._v("164")]),t("br"),t("span",{staticClass:"line-number"},[s._v("165")]),t("br"),t("span",{staticClass:"line-number"},[s._v("166")]),t("br"),t("span",{staticClass:"line-number"},[s._v("167")]),t("br"),t("span",{staticClass:"line-number"},[s._v("168")]),t("br"),t("span",{staticClass:"line-number"},[s._v("169")]),t("br"),t("span",{staticClass:"line-number"},[s._v("170")]),t("br"),t("span",{staticClass:"line-number"},[s._v("171")]),t("br"),t("span",{staticClass:"line-number"},[s._v("172")]),t("br"),t("span",{staticClass:"line-number"},[s._v("173")]),t("br"),t("span",{staticClass:"line-number"},[s._v("174")]),t("br"),t("span",{staticClass:"line-number"},[s._v("175")]),t("br"),t("span",{staticClass:"line-number"},[s._v("176")]),t("br"),t("span",{staticClass:"line-number"},[s._v("177")]),t("br"),t("span",{staticClass:"line-number"},[s._v("178")]),t("br"),t("span",{staticClass:"line-number"},[s._v("179")]),t("br"),t("span",{staticClass:"line-number"},[s._v("180")]),t("br"),t("span",{staticClass:"line-number"},[s._v("181")]),t("br"),t("span",{staticClass:"line-number"},[s._v("182")]),t("br"),t("span",{staticClass:"line-number"},[s._v("183")]),t("br"),t("span",{staticClass:"line-number"},[s._v("184")]),t("br"),t("span",{staticClass:"line-number"},[s._v("185")]),t("br"),t("span",{staticClass:"line-number"},[s._v("186")]),t("br"),t("span",{staticClass:"line-number"},[s._v("187")]),t("br"),t("span",{staticClass:"line-number"},[s._v("188")]),t("br"),t("span",{staticClass:"line-number"},[s._v("189")]),t("br"),t("span",{staticClass:"line-number"},[s._v("190")]),t("br"),t("span",{staticClass:"line-number"},[s._v("191")]),t("br"),t("span",{staticClass:"line-number"},[s._v("192")]),t("br"),t("span",{staticClass:"line-number"},[s._v("193")]),t("br"),t("span",{staticClass:"line-number"},[s._v("194")]),t("br"),t("span",{staticClass:"line-number"},[s._v("195")]),t("br"),t("span",{staticClass:"line-number"},[s._v("196")]),t("br"),t("span",{staticClass:"line-number"},[s._v("197")]),t("br"),t("span",{staticClass:"line-number"},[s._v("198")]),t("br"),t("span",{staticClass:"line-number"},[s._v("199")]),t("br"),t("span",{staticClass:"line-number"},[s._v("200")]),t("br"),t("span",{staticClass:"line-number"},[s._v("201")]),t("br"),t("span",{staticClass:"line-number"},[s._v("202")]),t("br"),t("span",{staticClass:"line-number"},[s._v("203")]),t("br"),t("span",{staticClass:"line-number"},[s._v("204")]),t("br"),t("span",{staticClass:"line-number"},[s._v("205")]),t("br"),t("span",{staticClass:"line-number"},[s._v("206")]),t("br"),t("span",{staticClass:"line-number"},[s._v("207")]),t("br"),t("span",{staticClass:"line-number"},[s._v("208")]),t("br"),t("span",{staticClass:"line-number"},[s._v("209")]),t("br"),t("span",{staticClass:"line-number"},[s._v("210")]),t("br"),t("span",{staticClass:"line-number"},[s._v("211")]),t("br"),t("span",{staticClass:"line-number"},[s._v("212")]),t("br"),t("span",{staticClass:"line-number"},[s._v("213")]),t("br"),t("span",{staticClass:"line-number"},[s._v("214")]),t("br"),t("span",{staticClass:"line-number"},[s._v("215")]),t("br"),t("span",{staticClass:"line-number"},[s._v("216")]),t("br"),t("span",{staticClass:"line-number"},[s._v("217")]),t("br"),t("span",{staticClass:"line-number"},[s._v("218")]),t("br"),t("span",{staticClass:"line-number"},[s._v("219")]),t("br"),t("span",{staticClass:"line-number"},[s._v("220")]),t("br"),t("span",{staticClass:"line-number"},[s._v("221")]),t("br"),t("span",{staticClass:"line-number"},[s._v("222")]),t("br"),t("span",{staticClass:"line-number"},[s._v("223")]),t("br"),t("span",{staticClass:"line-number"},[s._v("224")]),t("br"),t("span",{staticClass:"line-number"},[s._v("225")]),t("br"),t("span",{staticClass:"line-number"},[s._v("226")]),t("br"),t("span",{staticClass:"line-number"},[s._v("227")]),t("br"),t("span",{staticClass:"line-number"},[s._v("228")]),t("br"),t("span",{staticClass:"line-number"},[s._v("229")]),t("br"),t("span",{staticClass:"line-number"},[s._v("230")]),t("br"),t("span",{staticClass:"line-number"},[s._v("231")]),t("br"),t("span",{staticClass:"line-number"},[s._v("232")]),t("br"),t("span",{staticClass:"line-number"},[s._v("233")]),t("br"),t("span",{staticClass:"line-number"},[s._v("234")]),t("br"),t("span",{staticClass:"line-number"},[s._v("235")]),t("br"),t("span",{staticClass:"line-number"},[s._v("236")]),t("br"),t("span",{staticClass:"line-number"},[s._v("237")]),t("br"),t("span",{staticClass:"line-number"},[s._v("238")]),t("br"),t("span",{staticClass:"line-number"},[s._v("239")]),t("br"),t("span",{staticClass:"line-number"},[s._v("240")]),t("br"),t("span",{staticClass:"line-number"},[s._v("241")]),t("br"),t("span",{staticClass:"line-number"},[s._v("242")]),t("br"),t("span",{staticClass:"line-number"},[s._v("243")]),t("br"),t("span",{staticClass:"line-number"},[s._v("244")]),t("br"),t("span",{staticClass:"line-number"},[s._v("245")]),t("br"),t("span",{staticClass:"line-number"},[s._v("246")]),t("br"),t("span",{staticClass:"line-number"},[s._v("247")]),t("br"),t("span",{staticClass:"line-number"},[s._v("248")]),t("br"),t("span",{staticClass:"line-number"},[s._v("249")]),t("br"),t("span",{staticClass:"line-number"},[s._v("250")]),t("br"),t("span",{staticClass:"line-number"},[s._v("251")]),t("br"),t("span",{staticClass:"line-number"},[s._v("252")]),t("br"),t("span",{staticClass:"line-number"},[s._v("253")]),t("br"),t("span",{staticClass:"line-number"},[s._v("254")]),t("br"),t("span",{staticClass:"line-number"},[s._v("255")]),t("br"),t("span",{staticClass:"line-number"},[s._v("256")]),t("br"),t("span",{staticClass:"line-number"},[s._v("257")]),t("br"),t("span",{staticClass:"line-number"},[s._v("258")]),t("br"),t("span",{staticClass:"line-number"},[s._v("259")]),t("br"),t("span",{staticClass:"line-number"},[s._v("260")]),t("br"),t("span",{staticClass:"line-number"},[s._v("261")]),t("br"),t("span",{staticClass:"line-number"},[s._v("262")]),t("br"),t("span",{staticClass:"line-number"},[s._v("263")]),t("br"),t("span",{staticClass:"line-number"},[s._v("264")]),t("br"),t("span",{staticClass:"line-number"},[s._v("265")]),t("br"),t("span",{staticClass:"line-number"},[s._v("266")]),t("br"),t("span",{staticClass:"line-number"},[s._v("267")]),t("br"),t("span",{staticClass:"line-number"},[s._v("268")]),t("br"),t("span",{staticClass:"line-number"},[s._v("269")]),t("br"),t("span",{staticClass:"line-number"},[s._v("270")]),t("br"),t("span",{staticClass:"line-number"},[s._v("271")]),t("br"),t("span",{staticClass:"line-number"},[s._v("272")]),t("br"),t("span",{staticClass:"line-number"},[s._v("273")]),t("br"),t("span",{staticClass:"line-number"},[s._v("274")]),t("br"),t("span",{staticClass:"line-number"},[s._v("275")]),t("br"),t("span",{staticClass:"line-number"},[s._v("276")]),t("br"),t("span",{staticClass:"line-number"},[s._v("277")]),t("br"),t("span",{staticClass:"line-number"},[s._v("278")]),t("br"),t("span",{staticClass:"line-number"},[s._v("279")]),t("br"),t("span",{staticClass:"line-number"},[s._v("280")]),t("br"),t("span",{staticClass:"line-number"},[s._v("281")]),t("br"),t("span",{staticClass:"line-number"},[s._v("282")]),t("br"),t("span",{staticClass:"line-number"},[s._v("283")]),t("br"),t("span",{staticClass:"line-number"},[s._v("284")]),t("br"),t("span",{staticClass:"line-number"},[s._v("285")]),t("br"),t("span",{staticClass:"line-number"},[s._v("286")]),t("br"),t("span",{staticClass:"line-number"},[s._v("287")]),t("br"),t("span",{staticClass:"line-number"},[s._v("288")]),t("br"),t("span",{staticClass:"line-number"},[s._v("289")]),t("br"),t("span",{staticClass:"line-number"},[s._v("290")]),t("br"),t("span",{staticClass:"line-number"},[s._v("291")]),t("br"),t("span",{staticClass:"line-number"},[s._v("292")]),t("br"),t("span",{staticClass:"line-number"},[s._v("293")]),t("br"),t("span",{staticClass:"line-number"},[s._v("294")]),t("br"),t("span",{staticClass:"line-number"},[s._v("295")]),t("br"),t("span",{staticClass:"line-number"},[s._v("296")]),t("br"),t("span",{staticClass:"line-number"},[s._v("297")]),t("br"),t("span",{staticClass:"line-number"},[s._v("298")]),t("br"),t("span",{staticClass:"line-number"},[s._v("299")]),t("br"),t("span",{staticClass:"line-number"},[s._v("300")]),t("br"),t("span",{staticClass:"line-number"},[s._v("301")]),t("br"),t("span",{staticClass:"line-number"},[s._v("302")]),t("br"),t("span",{staticClass:"line-number"},[s._v("303")]),t("br"),t("span",{staticClass:"line-number"},[s._v("304")]),t("br"),t("span",{staticClass:"line-number"},[s._v("305")]),t("br"),t("span",{staticClass:"line-number"},[s._v("306")]),t("br"),t("span",{staticClass:"line-number"},[s._v("307")]),t("br"),t("span",{staticClass:"line-number"},[s._v("308")]),t("br"),t("span",{staticClass:"line-number"},[s._v("309")]),t("br"),t("span",{staticClass:"line-number"},[s._v("310")]),t("br"),t("span",{staticClass:"line-number"},[s._v("311")]),t("br"),t("span",{staticClass:"line-number"},[s._v("312")]),t("br"),t("span",{staticClass:"line-number"},[s._v("313")]),t("br"),t("span",{staticClass:"line-number"},[s._v("314")]),t("br"),t("span",{staticClass:"line-number"},[s._v("315")]),t("br"),t("span",{staticClass:"line-number"},[s._v("316")]),t("br"),t("span",{staticClass:"line-number"},[s._v("317")]),t("br"),t("span",{staticClass:"line-number"},[s._v("318")]),t("br"),t("span",{staticClass:"line-number"},[s._v("319")]),t("br"),t("span",{staticClass:"line-number"},[s._v("320")]),t("br"),t("span",{staticClass:"line-number"},[s._v("321")]),t("br"),t("span",{staticClass:"line-number"},[s._v("322")]),t("br"),t("span",{staticClass:"line-number"},[s._v("323")]),t("br"),t("span",{staticClass:"line-number"},[s._v("324")]),t("br"),t("span",{staticClass:"line-number"},[s._v("325")]),t("br"),t("span",{staticClass:"line-number"},[s._v("326")]),t("br"),t("span",{staticClass:"line-number"},[s._v("327")]),t("br"),t("span",{staticClass:"line-number"},[s._v("328")]),t("br"),t("span",{staticClass:"line-number"},[s._v("329")]),t("br"),t("span",{staticClass:"line-number"},[s._v("330")]),t("br"),t("span",{staticClass:"line-number"},[s._v("331")]),t("br"),t("span",{staticClass:"line-number"},[s._v("332")]),t("br"),t("span",{staticClass:"line-number"},[s._v("333")]),t("br"),t("span",{staticClass:"line-number"},[s._v("334")]),t("br"),t("span",{staticClass:"line-number"},[s._v("335")]),t("br"),t("span",{staticClass:"line-number"},[s._v("336")]),t("br"),t("span",{staticClass:"line-number"},[s._v("337")]),t("br"),t("span",{staticClass:"line-number"},[s._v("338")]),t("br"),t("span",{staticClass:"line-number"},[s._v("339")]),t("br"),t("span",{staticClass:"line-number"},[s._v("340")]),t("br"),t("span",{staticClass:"line-number"},[s._v("341")]),t("br"),t("span",{staticClass:"line-number"},[s._v("342")]),t("br"),t("span",{staticClass:"line-number"},[s._v("343")]),t("br"),t("span",{staticClass:"line-number"},[s._v("344")]),t("br"),t("span",{staticClass:"line-number"},[s._v("345")]),t("br"),t("span",{staticClass:"line-number"},[s._v("346")]),t("br"),t("span",{staticClass:"line-number"},[s._v("347")]),t("br"),t("span",{staticClass:"line-number"},[s._v("348")]),t("br"),t("span",{staticClass:"line-number"},[s._v("349")]),t("br"),t("span",{staticClass:"line-number"},[s._v("350")]),t("br"),t("span",{staticClass:"line-number"},[s._v("351")]),t("br"),t("span",{staticClass:"line-number"},[s._v("352")]),t("br"),t("span",{staticClass:"line-number"},[s._v("353")]),t("br"),t("span",{staticClass:"line-number"},[s._v("354")]),t("br"),t("span",{staticClass:"line-number"},[s._v("355")]),t("br"),t("span",{staticClass:"line-number"},[s._v("356")]),t("br"),t("span",{staticClass:"line-number"},[s._v("357")]),t("br"),t("span",{staticClass:"line-number"},[s._v("358")]),t("br"),t("span",{staticClass:"line-number"},[s._v("359")]),t("br"),t("span",{staticClass:"line-number"},[s._v("360")]),t("br"),t("span",{staticClass:"line-number"},[s._v("361")]),t("br"),t("span",{staticClass:"line-number"},[s._v("362")]),t("br"),t("span",{staticClass:"line-number"},[s._v("363")]),t("br"),t("span",{staticClass:"line-number"},[s._v("364")]),t("br"),t("span",{staticClass:"line-number"},[s._v("365")]),t("br"),t("span",{staticClass:"line-number"},[s._v("366")]),t("br"),t("span",{staticClass:"line-number"},[s._v("367")]),t("br"),t("span",{staticClass:"line-number"},[s._v("368")]),t("br"),t("span",{staticClass:"line-number"},[s._v("369")]),t("br"),t("span",{staticClass:"line-number"},[s._v("370")]),t("br"),t("span",{staticClass:"line-number"},[s._v("371")]),t("br"),t("span",{staticClass:"line-number"},[s._v("372")]),t("br"),t("span",{staticClass:"line-number"},[s._v("373")]),t("br"),t("span",{staticClass:"line-number"},[s._v("374")]),t("br"),t("span",{staticClass:"line-number"},[s._v("375")]),t("br"),t("span",{staticClass:"line-number"},[s._v("376")]),t("br"),t("span",{staticClass:"line-number"},[s._v("377")]),t("br"),t("span",{staticClass:"line-number"},[s._v("378")]),t("br"),t("span",{staticClass:"line-number"},[s._v("379")]),t("br"),t("span",{staticClass:"line-number"},[s._v("380")]),t("br"),t("span",{staticClass:"line-number"},[s._v("381")]),t("br"),t("span",{staticClass:"line-number"},[s._v("382")]),t("br"),t("span",{staticClass:"line-number"},[s._v("383")]),t("br"),t("span",{staticClass:"line-number"},[s._v("384")]),t("br"),t("span",{staticClass:"line-number"},[s._v("385")]),t("br"),t("span",{staticClass:"line-number"},[s._v("386")]),t("br"),t("span",{staticClass:"line-number"},[s._v("387")]),t("br"),t("span",{staticClass:"line-number"},[s._v("388")]),t("br"),t("span",{staticClass:"line-number"},[s._v("389")]),t("br"),t("span",{staticClass:"line-number"},[s._v("390")]),t("br"),t("span",{staticClass:"line-number"},[s._v("391")]),t("br"),t("span",{staticClass:"line-number"},[s._v("392")]),t("br"),t("span",{staticClass:"line-number"},[s._v("393")]),t("br"),t("span",{staticClass:"line-number"},[s._v("394")]),t("br"),t("span",{staticClass:"line-number"},[s._v("395")]),t("br"),t("span",{staticClass:"line-number"},[s._v("396")]),t("br"),t("span",{staticClass:"line-number"},[s._v("397")]),t("br"),t("span",{staticClass:"line-number"},[s._v("398")]),t("br"),t("span",{staticClass:"line-number"},[s._v("399")]),t("br"),t("span",{staticClass:"line-number"},[s._v("400")]),t("br"),t("span",{staticClass:"line-number"},[s._v("401")]),t("br"),t("span",{staticClass:"line-number"},[s._v("402")]),t("br"),t("span",{staticClass:"line-number"},[s._v("403")]),t("br"),t("span",{staticClass:"line-number"},[s._v("404")]),t("br"),t("span",{staticClass:"line-number"},[s._v("405")]),t("br"),t("span",{staticClass:"line-number"},[s._v("406")]),t("br"),t("span",{staticClass:"line-number"},[s._v("407")]),t("br"),t("span",{staticClass:"line-number"},[s._v("408")]),t("br"),t("span",{staticClass:"line-number"},[s._v("409")]),t("br"),t("span",{staticClass:"line-number"},[s._v("410")]),t("br"),t("span",{staticClass:"line-number"},[s._v("411")]),t("br"),t("span",{staticClass:"line-number"},[s._v("412")]),t("br"),t("span",{staticClass:"line-number"},[s._v("413")]),t("br"),t("span",{staticClass:"line-number"},[s._v("414")]),t("br"),t("span",{staticClass:"line-number"},[s._v("415")]),t("br"),t("span",{staticClass:"line-number"},[s._v("416")]),t("br"),t("span",{staticClass:"line-number"},[s._v("417")]),t("br"),t("span",{staticClass:"line-number"},[s._v("418")]),t("br"),t("span",{staticClass:"line-number"},[s._v("419")]),t("br"),t("span",{staticClass:"line-number"},[s._v("420")]),t("br"),t("span",{staticClass:"line-number"},[s._v("421")]),t("br"),t("span",{staticClass:"line-number"},[s._v("422")]),t("br"),t("span",{staticClass:"line-number"},[s._v("423")]),t("br"),t("span",{staticClass:"line-number"},[s._v("424")]),t("br"),t("span",{staticClass:"line-number"},[s._v("425")]),t("br"),t("span",{staticClass:"line-number"},[s._v("426")]),t("br"),t("span",{staticClass:"line-number"},[s._v("427")]),t("br"),t("span",{staticClass:"line-number"},[s._v("428")]),t("br"),t("span",{staticClass:"line-number"},[s._v("429")]),t("br"),t("span",{staticClass:"line-number"},[s._v("430")]),t("br"),t("span",{staticClass:"line-number"},[s._v("431")]),t("br"),t("span",{staticClass:"line-number"},[s._v("432")]),t("br"),t("span",{staticClass:"line-number"},[s._v("433")]),t("br"),t("span",{staticClass:"line-number"},[s._v("434")]),t("br"),t("span",{staticClass:"line-number"},[s._v("435")]),t("br"),t("span",{staticClass:"line-number"},[s._v("436")]),t("br"),t("span",{staticClass:"line-number"},[s._v("437")]),t("br"),t("span",{staticClass:"line-number"},[s._v("438")]),t("br"),t("span",{staticClass:"line-number"},[s._v("439")]),t("br"),t("span",{staticClass:"line-number"},[s._v("440")]),t("br"),t("span",{staticClass:"line-number"},[s._v("441")]),t("br"),t("span",{staticClass:"line-number"},[s._v("442")]),t("br"),t("span",{staticClass:"line-number"},[s._v("443")]),t("br"),t("span",{staticClass:"line-number"},[s._v("444")]),t("br"),t("span",{staticClass:"line-number"},[s._v("445")]),t("br"),t("span",{staticClass:"line-number"},[s._v("446")]),t("br"),t("span",{staticClass:"line-number"},[s._v("447")]),t("br"),t("span",{staticClass:"line-number"},[s._v("448")]),t("br"),t("span",{staticClass:"line-number"},[s._v("449")]),t("br"),t("span",{staticClass:"line-number"},[s._v("450")]),t("br"),t("span",{staticClass:"line-number"},[s._v("451")]),t("br"),t("span",{staticClass:"line-number"},[s._v("452")]),t("br"),t("span",{staticClass:"line-number"},[s._v("453")]),t("br"),t("span",{staticClass:"line-number"},[s._v("454")]),t("br"),t("span",{staticClass:"line-number"},[s._v("455")]),t("br"),t("span",{staticClass:"line-number"},[s._v("456")]),t("br"),t("span",{staticClass:"line-number"},[s._v("457")]),t("br"),t("span",{staticClass:"line-number"},[s._v("458")]),t("br"),t("span",{staticClass:"line-number"},[s._v("459")]),t("br"),t("span",{staticClass:"line-number"},[s._v("460")]),t("br"),t("span",{staticClass:"line-number"},[s._v("461")]),t("br"),t("span",{staticClass:"line-number"},[s._v("462")]),t("br"),t("span",{staticClass:"line-number"},[s._v("463")]),t("br"),t("span",{staticClass:"line-number"},[s._v("464")]),t("br"),t("span",{staticClass:"line-number"},[s._v("465")]),t("br"),t("span",{staticClass:"line-number"},[s._v("466")]),t("br"),t("span",{staticClass:"line-number"},[s._v("467")]),t("br"),t("span",{staticClass:"line-number"},[s._v("468")]),t("br"),t("span",{staticClass:"line-number"},[s._v("469")]),t("br"),t("span",{staticClass:"line-number"},[s._v("470")]),t("br"),t("span",{staticClass:"line-number"},[s._v("471")]),t("br"),t("span",{staticClass:"line-number"},[s._v("472")]),t("br"),t("span",{staticClass:"line-number"},[s._v("473")]),t("br"),t("span",{staticClass:"line-number"},[s._v("474")]),t("br"),t("span",{staticClass:"line-number"},[s._v("475")]),t("br"),t("span",{staticClass:"line-number"},[s._v("476")]),t("br"),t("span",{staticClass:"line-number"},[s._v("477")]),t("br"),t("span",{staticClass:"line-number"},[s._v("478")]),t("br"),t("span",{staticClass:"line-number"},[s._v("479")]),t("br"),t("span",{staticClass:"line-number"},[s._v("480")]),t("br"),t("span",{staticClass:"line-number"},[s._v("481")]),t("br"),t("span",{staticClass:"line-number"},[s._v("482")]),t("br"),t("span",{staticClass:"line-number"},[s._v("483")]),t("br"),t("span",{staticClass:"line-number"},[s._v("484")]),t("br"),t("span",{staticClass:"line-number"},[s._v("485")]),t("br"),t("span",{staticClass:"line-number"},[s._v("486")]),t("br"),t("span",{staticClass:"line-number"},[s._v("487")]),t("br"),t("span",{staticClass:"line-number"},[s._v("488")]),t("br"),t("span",{staticClass:"line-number"},[s._v("489")]),t("br"),t("span",{staticClass:"line-number"},[s._v("490")]),t("br"),t("span",{staticClass:"line-number"},[s._v("491")]),t("br"),t("span",{staticClass:"line-number"},[s._v("492")]),t("br"),t("span",{staticClass:"line-number"},[s._v("493")]),t("br"),t("span",{staticClass:"line-number"},[s._v("494")]),t("br"),t("span",{staticClass:"line-number"},[s._v("495")]),t("br"),t("span",{staticClass:"line-number"},[s._v("496")]),t("br"),t("span",{staticClass:"line-number"},[s._v("497")]),t("br"),t("span",{staticClass:"line-number"},[s._v("498")]),t("br"),t("span",{staticClass:"line-number"},[s._v("499")]),t("br"),t("span",{staticClass:"line-number"},[s._v("500")]),t("br"),t("span",{staticClass:"line-number"},[s._v("501")]),t("br"),t("span",{staticClass:"line-number"},[s._v("502")]),t("br"),t("span",{staticClass:"line-number"},[s._v("503")]),t("br"),t("span",{staticClass:"line-number"},[s._v("504")]),t("br"),t("span",{staticClass:"line-number"},[s._v("505")]),t("br"),t("span",{staticClass:"line-number"},[s._v("506")]),t("br"),t("span",{staticClass:"line-number"},[s._v("507")]),t("br"),t("span",{staticClass:"line-number"},[s._v("508")]),t("br"),t("span",{staticClass:"line-number"},[s._v("509")]),t("br"),t("span",{staticClass:"line-number"},[s._v("510")]),t("br"),t("span",{staticClass:"line-number"},[s._v("511")]),t("br"),t("span",{staticClass:"line-number"},[s._v("512")]),t("br"),t("span",{staticClass:"line-number"},[s._v("513")]),t("br"),t("span",{staticClass:"line-number"},[s._v("514")]),t("br"),t("span",{staticClass:"line-number"},[s._v("515")]),t("br"),t("span",{staticClass:"line-number"},[s._v("516")]),t("br"),t("span",{staticClass:"line-number"},[s._v("517")]),t("br"),t("span",{staticClass:"line-number"},[s._v("518")]),t("br"),t("span",{staticClass:"line-number"},[s._v("519")]),t("br"),t("span",{staticClass:"line-number"},[s._v("520")]),t("br"),t("span",{staticClass:"line-number"},[s._v("521")]),t("br"),t("span",{staticClass:"line-number"},[s._v("522")]),t("br"),t("span",{staticClass:"line-number"},[s._v("523")]),t("br"),t("span",{staticClass:"line-number"},[s._v("524")]),t("br"),t("span",{staticClass:"line-number"},[s._v("525")]),t("br"),t("span",{staticClass:"line-number"},[s._v("526")]),t("br"),t("span",{staticClass:"line-number"},[s._v("527")]),t("br"),t("span",{staticClass:"line-number"},[s._v("528")]),t("br"),t("span",{staticClass:"line-number"},[s._v("529")]),t("br"),t("span",{staticClass:"line-number"},[s._v("530")]),t("br"),t("span",{staticClass:"line-number"},[s._v("531")]),t("br"),t("span",{staticClass:"line-number"},[s._v("532")]),t("br"),t("span",{staticClass:"line-number"},[s._v("533")]),t("br"),t("span",{staticClass:"line-number"},[s._v("534")]),t("br"),t("span",{staticClass:"line-number"},[s._v("535")]),t("br"),t("span",{staticClass:"line-number"},[s._v("536")]),t("br"),t("span",{staticClass:"line-number"},[s._v("537")]),t("br"),t("span",{staticClass:"line-number"},[s._v("538")]),t("br"),t("span",{staticClass:"line-number"},[s._v("539")]),t("br"),t("span",{staticClass:"line-number"},[s._v("540")]),t("br"),t("span",{staticClass:"line-number"},[s._v("541")]),t("br"),t("span",{staticClass:"line-number"},[s._v("542")]),t("br"),t("span",{staticClass:"line-number"},[s._v("543")]),t("br"),t("span",{staticClass:"line-number"},[s._v("544")]),t("br"),t("span",{staticClass:"line-number"},[s._v("545")]),t("br"),t("span",{staticClass:"line-number"},[s._v("546")]),t("br"),t("span",{staticClass:"line-number"},[s._v("547")]),t("br"),t("span",{staticClass:"line-number"},[s._v("548")]),t("br"),t("span",{staticClass:"line-number"},[s._v("549")]),t("br"),t("span",{staticClass:"line-number"},[s._v("550")]),t("br"),t("span",{staticClass:"line-number"},[s._v("551")]),t("br"),t("span",{staticClass:"line-number"},[s._v("552")]),t("br"),t("span",{staticClass:"line-number"},[s._v("553")]),t("br"),t("span",{staticClass:"line-number"},[s._v("554")]),t("br"),t("span",{staticClass:"line-number"},[s._v("555")]),t("br"),t("span",{staticClass:"line-number"},[s._v("556")]),t("br"),t("span",{staticClass:"line-number"},[s._v("557")]),t("br"),t("span",{staticClass:"line-number"},[s._v("558")]),t("br"),t("span",{staticClass:"line-number"},[s._v("559")]),t("br"),t("span",{staticClass:"line-number"},[s._v("560")]),t("br"),t("span",{staticClass:"line-number"},[s._v("561")]),t("br"),t("span",{staticClass:"line-number"},[s._v("562")]),t("br"),t("span",{staticClass:"line-number"},[s._v("563")]),t("br"),t("span",{staticClass:"line-number"},[s._v("564")]),t("br"),t("span",{staticClass:"line-number"},[s._v("565")]),t("br"),t("span",{staticClass:"line-number"},[s._v("566")]),t("br"),t("span",{staticClass:"line-number"},[s._v("567")]),t("br"),t("span",{staticClass:"line-number"},[s._v("568")]),t("br"),t("span",{staticClass:"line-number"},[s._v("569")]),t("br"),t("span",{staticClass:"line-number"},[s._v("570")]),t("br"),t("span",{staticClass:"line-number"},[s._v("571")]),t("br"),t("span",{staticClass:"line-number"},[s._v("572")]),t("br"),t("span",{staticClass:"line-number"},[s._v("573")]),t("br"),t("span",{staticClass:"line-number"},[s._v("574")]),t("br"),t("span",{staticClass:"line-number"},[s._v("575")]),t("br"),t("span",{staticClass:"line-number"},[s._v("576")]),t("br"),t("span",{staticClass:"line-number"},[s._v("577")]),t("br"),t("span",{staticClass:"line-number"},[s._v("578")]),t("br"),t("span",{staticClass:"line-number"},[s._v("579")]),t("br"),t("span",{staticClass:"line-number"},[s._v("580")]),t("br"),t("span",{staticClass:"line-number"},[s._v("581")]),t("br"),t("span",{staticClass:"line-number"},[s._v("582")]),t("br"),t("span",{staticClass:"line-number"},[s._v("583")]),t("br"),t("span",{staticClass:"line-number"},[s._v("584")]),t("br"),t("span",{staticClass:"line-number"},[s._v("585")]),t("br"),t("span",{staticClass:"line-number"},[s._v("586")]),t("br"),t("span",{staticClass:"line-number"},[s._v("587")]),t("br"),t("span",{staticClass:"line-number"},[s._v("588")]),t("br"),t("span",{staticClass:"line-number"},[s._v("589")]),t("br"),t("span",{staticClass:"line-number"},[s._v("590")]),t("br"),t("span",{staticClass:"line-number"},[s._v("591")]),t("br"),t("span",{staticClass:"line-number"},[s._v("592")]),t("br"),t("span",{staticClass:"line-number"},[s._v("593")]),t("br"),t("span",{staticClass:"line-number"},[s._v("594")]),t("br"),t("span",{staticClass:"line-number"},[s._v("595")]),t("br"),t("span",{staticClass:"line-number"},[s._v("596")]),t("br"),t("span",{staticClass:"line-number"},[s._v("597")]),t("br"),t("span",{staticClass:"line-number"},[s._v("598")]),t("br"),t("span",{staticClass:"line-number"},[s._v("599")]),t("br"),t("span",{staticClass:"line-number"},[s._v("600")]),t("br"),t("span",{staticClass:"line-number"},[s._v("601")]),t("br"),t("span",{staticClass:"line-number"},[s._v("602")]),t("br"),t("span",{staticClass:"line-number"},[s._v("603")]),t("br"),t("span",{staticClass:"line-number"},[s._v("604")]),t("br"),t("span",{staticClass:"line-number"},[s._v("605")]),t("br"),t("span",{staticClass:"line-number"},[s._v("606")]),t("br"),t("span",{staticClass:"line-number"},[s._v("607")]),t("br"),t("span",{staticClass:"line-number"},[s._v("608")]),t("br"),t("span",{staticClass:"line-number"},[s._v("609")]),t("br"),t("span",{staticClass:"line-number"},[s._v("610")]),t("br"),t("span",{staticClass:"line-number"},[s._v("611")]),t("br"),t("span",{staticClass:"line-number"},[s._v("612")]),t("br"),t("span",{staticClass:"line-number"},[s._v("613")]),t("br"),t("span",{staticClass:"line-number"},[s._v("614")]),t("br"),t("span",{staticClass:"line-number"},[s._v("615")]),t("br"),t("span",{staticClass:"line-number"},[s._v("616")]),t("br"),t("span",{staticClass:"line-number"},[s._v("617")]),t("br"),t("span",{staticClass:"line-number"},[s._v("618")]),t("br"),t("span",{staticClass:"line-number"},[s._v("619")]),t("br"),t("span",{staticClass:"line-number"},[s._v("620")]),t("br"),t("span",{staticClass:"line-number"},[s._v("621")]),t("br"),t("span",{staticClass:"line-number"},[s._v("622")]),t("br"),t("span",{staticClass:"line-number"},[s._v("623")]),t("br"),t("span",{staticClass:"line-number"},[s._v("624")]),t("br"),t("span",{staticClass:"line-number"},[s._v("625")]),t("br"),t("span",{staticClass:"line-number"},[s._v("626")]),t("br"),t("span",{staticClass:"line-number"},[s._v("627")]),t("br"),t("span",{staticClass:"line-number"},[s._v("628")]),t("br"),t("span",{staticClass:"line-number"},[s._v("629")]),t("br"),t("span",{staticClass:"line-number"},[s._v("630")]),t("br"),t("span",{staticClass:"line-number"},[s._v("631")]),t("br"),t("span",{staticClass:"line-number"},[s._v("632")]),t("br"),t("span",{staticClass:"line-number"},[s._v("633")]),t("br"),t("span",{staticClass:"line-number"},[s._v("634")]),t("br"),t("span",{staticClass:"line-number"},[s._v("635")]),t("br"),t("span",{staticClass:"line-number"},[s._v("636")]),t("br"),t("span",{staticClass:"line-number"},[s._v("637")]),t("br"),t("span",{staticClass:"line-number"},[s._v("638")]),t("br"),t("span",{staticClass:"line-number"},[s._v("639")]),t("br"),t("span",{staticClass:"line-number"},[s._v("640")]),t("br"),t("span",{staticClass:"line-number"},[s._v("641")]),t("br"),t("span",{staticClass:"line-number"},[s._v("642")]),t("br"),t("span",{staticClass:"line-number"},[s._v("643")]),t("br"),t("span",{staticClass:"line-number"},[s._v("644")]),t("br"),t("span",{staticClass:"line-number"},[s._v("645")]),t("br"),t("span",{staticClass:"line-number"},[s._v("646")]),t("br"),t("span",{staticClass:"line-number"},[s._v("647")]),t("br"),t("span",{staticClass:"line-number"},[s._v("648")]),t("br"),t("span",{staticClass:"line-number"},[s._v("649")]),t("br"),t("span",{staticClass:"line-number"},[s._v("650")]),t("br"),t("span",{staticClass:"line-number"},[s._v("651")]),t("br"),t("span",{staticClass:"line-number"},[s._v("652")]),t("br"),t("span",{staticClass:"line-number"},[s._v("653")]),t("br"),t("span",{staticClass:"line-number"},[s._v("654")]),t("br"),t("span",{staticClass:"line-number"},[s._v("655")]),t("br"),t("span",{staticClass:"line-number"},[s._v("656")]),t("br"),t("span",{staticClass:"line-number"},[s._v("657")]),t("br"),t("span",{staticClass:"line-number"},[s._v("658")]),t("br"),t("span",{staticClass:"line-number"},[s._v("659")]),t("br"),t("span",{staticClass:"line-number"},[s._v("660")]),t("br"),t("span",{staticClass:"line-number"},[s._v("661")]),t("br"),t("span",{staticClass:"line-number"},[s._v("662")]),t("br"),t("span",{staticClass:"line-number"},[s._v("663")]),t("br"),t("span",{staticClass:"line-number"},[s._v("664")]),t("br"),t("span",{staticClass:"line-number"},[s._v("665")]),t("br"),t("span",{staticClass:"line-number"},[s._v("666")]),t("br"),t("span",{staticClass:"line-number"},[s._v("667")]),t("br"),t("span",{staticClass:"line-number"},[s._v("668")]),t("br"),t("span",{staticClass:"line-number"},[s._v("669")]),t("br"),t("span",{staticClass:"line-number"},[s._v("670")]),t("br"),t("span",{staticClass:"line-number"},[s._v("671")]),t("br"),t("span",{staticClass:"line-number"},[s._v("672")]),t("br"),t("span",{staticClass:"line-number"},[s._v("673")]),t("br"),t("span",{staticClass:"line-number"},[s._v("674")]),t("br"),t("span",{staticClass:"line-number"},[s._v("675")]),t("br"),t("span",{staticClass:"line-number"},[s._v("676")]),t("br"),t("span",{staticClass:"line-number"},[s._v("677")]),t("br"),t("span",{staticClass:"line-number"},[s._v("678")]),t("br"),t("span",{staticClass:"line-number"},[s._v("679")]),t("br"),t("span",{staticClass:"line-number"},[s._v("680")]),t("br"),t("span",{staticClass:"line-number"},[s._v("681")]),t("br"),t("span",{staticClass:"line-number"},[s._v("682")]),t("br"),t("span",{staticClass:"line-number"},[s._v("683")]),t("br"),t("span",{staticClass:"line-number"},[s._v("684")]),t("br"),t("span",{staticClass:"line-number"},[s._v("685")]),t("br"),t("span",{staticClass:"line-number"},[s._v("686")]),t("br"),t("span",{staticClass:"line-number"},[s._v("687")]),t("br"),t("span",{staticClass:"line-number"},[s._v("688")]),t("br"),t("span",{staticClass:"line-number"},[s._v("689")]),t("br"),t("span",{staticClass:"line-number"},[s._v("690")]),t("br"),t("span",{staticClass:"line-number"},[s._v("691")]),t("br"),t("span",{staticClass:"line-number"},[s._v("692")]),t("br"),t("span",{staticClass:"line-number"},[s._v("693")]),t("br"),t("span",{staticClass:"line-number"},[s._v("694")]),t("br"),t("span",{staticClass:"line-number"},[s._v("695")]),t("br"),t("span",{staticClass:"line-number"},[s._v("696")]),t("br"),t("span",{staticClass:"line-number"},[s._v("697")]),t("br"),t("span",{staticClass:"line-number"},[s._v("698")]),t("br"),t("span",{staticClass:"line-number"},[s._v("699")]),t("br"),t("span",{staticClass:"line-number"},[s._v("700")]),t("br"),t("span",{staticClass:"line-number"},[s._v("701")]),t("br"),t("span",{staticClass:"line-number"},[s._v("702")]),t("br"),t("span",{staticClass:"line-number"},[s._v("703")]),t("br"),t("span",{staticClass:"line-number"},[s._v("704")]),t("br"),t("span",{staticClass:"line-number"},[s._v("705")]),t("br"),t("span",{staticClass:"line-number"},[s._v("706")]),t("br"),t("span",{staticClass:"line-number"},[s._v("707")]),t("br"),t("span",{staticClass:"line-number"},[s._v("708")]),t("br"),t("span",{staticClass:"line-number"},[s._v("709")]),t("br"),t("span",{staticClass:"line-number"},[s._v("710")]),t("br"),t("span",{staticClass:"line-number"},[s._v("711")]),t("br"),t("span",{staticClass:"line-number"},[s._v("712")]),t("br"),t("span",{staticClass:"line-number"},[s._v("713")]),t("br"),t("span",{staticClass:"line-number"},[s._v("714")]),t("br"),t("span",{staticClass:"line-number"},[s._v("715")]),t("br"),t("span",{staticClass:"line-number"},[s._v("716")]),t("br"),t("span",{staticClass:"line-number"},[s._v("717")]),t("br"),t("span",{staticClass:"line-number"},[s._v("718")]),t("br"),t("span",{staticClass:"line-number"},[s._v("719")]),t("br"),t("span",{staticClass:"line-number"},[s._v("720")]),t("br"),t("span",{staticClass:"line-number"},[s._v("721")]),t("br"),t("span",{staticClass:"line-number"},[s._v("722")]),t("br"),t("span",{staticClass:"line-number"},[s._v("723")]),t("br"),t("span",{staticClass:"line-number"},[s._v("724")]),t("br"),t("span",{staticClass:"line-number"},[s._v("725")]),t("br"),t("span",{staticClass:"line-number"},[s._v("726")]),t("br"),t("span",{staticClass:"line-number"},[s._v("727")]),t("br"),t("span",{staticClass:"line-number"},[s._v("728")]),t("br"),t("span",{staticClass:"line-number"},[s._v("729")]),t("br"),t("span",{staticClass:"line-number"},[s._v("730")]),t("br"),t("span",{staticClass:"line-number"},[s._v("731")]),t("br"),t("span",{staticClass:"line-number"},[s._v("732")]),t("br"),t("span",{staticClass:"line-number"},[s._v("733")]),t("br"),t("span",{staticClass:"line-number"},[s._v("734")]),t("br"),t("span",{staticClass:"line-number"},[s._v("735")]),t("br"),t("span",{staticClass:"line-number"},[s._v("736")]),t("br"),t("span",{staticClass:"line-number"},[s._v("737")]),t("br"),t("span",{staticClass:"line-number"},[s._v("738")]),t("br"),t("span",{staticClass:"line-number"},[s._v("739")]),t("br"),t("span",{staticClass:"line-number"},[s._v("740")]),t("br"),t("span",{staticClass:"line-number"},[s._v("741")]),t("br"),t("span",{staticClass:"line-number"},[s._v("742")]),t("br"),t("span",{staticClass:"line-number"},[s._v("743")]),t("br"),t("span",{staticClass:"line-number"},[s._v("744")]),t("br"),t("span",{staticClass:"line-number"},[s._v("745")]),t("br"),t("span",{staticClass:"line-number"},[s._v("746")]),t("br"),t("span",{staticClass:"line-number"},[s._v("747")]),t("br"),t("span",{staticClass:"line-number"},[s._v("748")]),t("br"),t("span",{staticClass:"line-number"},[s._v("749")]),t("br"),t("span",{staticClass:"line-number"},[s._v("750")]),t("br"),t("span",{staticClass:"line-number"},[s._v("751")]),t("br"),t("span",{staticClass:"line-number"},[s._v("752")]),t("br"),t("span",{staticClass:"line-number"},[s._v("753")]),t("br"),t("span",{staticClass:"line-number"},[s._v("754")]),t("br"),t("span",{staticClass:"line-number"},[s._v("755")]),t("br"),t("span",{staticClass:"line-number"},[s._v("756")]),t("br"),t("span",{staticClass:"line-number"},[s._v("757")]),t("br"),t("span",{staticClass:"line-number"},[s._v("758")]),t("br"),t("span",{staticClass:"line-number"},[s._v("759")]),t("br"),t("span",{staticClass:"line-number"},[s._v("760")]),t("br"),t("span",{staticClass:"line-number"},[s._v("761")]),t("br"),t("span",{staticClass:"line-number"},[s._v("762")]),t("br"),t("span",{staticClass:"line-number"},[s._v("763")]),t("br"),t("span",{staticClass:"line-number"},[s._v("764")]),t("br"),t("span",{staticClass:"line-number"},[s._v("765")]),t("br"),t("span",{staticClass:"line-number"},[s._v("766")]),t("br"),t("span",{staticClass:"line-number"},[s._v("767")]),t("br"),t("span",{staticClass:"line-number"},[s._v("768")]),t("br"),t("span",{staticClass:"line-number"},[s._v("769")]),t("br"),t("span",{staticClass:"line-number"},[s._v("770")]),t("br"),t("span",{staticClass:"line-number"},[s._v("771")]),t("br"),t("span",{staticClass:"line-number"},[s._v("772")]),t("br"),t("span",{staticClass:"line-number"},[s._v("773")]),t("br"),t("span",{staticClass:"line-number"},[s._v("774")]),t("br"),t("span",{staticClass:"line-number"},[s._v("775")]),t("br"),t("span",{staticClass:"line-number"},[s._v("776")]),t("br"),t("span",{staticClass:"line-number"},[s._v("777")]),t("br"),t("span",{staticClass:"line-number"},[s._v("778")]),t("br"),t("span",{staticClass:"line-number"},[s._v("779")]),t("br"),t("span",{staticClass:"line-number"},[s._v("780")]),t("br"),t("span",{staticClass:"line-number"},[s._v("781")]),t("br"),t("span",{staticClass:"line-number"},[s._v("782")]),t("br"),t("span",{staticClass:"line-number"},[s._v("783")]),t("br"),t("span",{staticClass:"line-number"},[s._v("784")]),t("br"),t("span",{staticClass:"line-number"},[s._v("785")]),t("br"),t("span",{staticClass:"line-number"},[s._v("786")]),t("br"),t("span",{staticClass:"line-number"},[s._v("787")]),t("br"),t("span",{staticClass:"line-number"},[s._v("788")]),t("br"),t("span",{staticClass:"line-number"},[s._v("789")]),t("br"),t("span",{staticClass:"line-number"},[s._v("790")]),t("br"),t("span",{staticClass:"line-number"},[s._v("791")]),t("br"),t("span",{staticClass:"line-number"},[s._v("792")]),t("br"),t("span",{staticClass:"line-number"},[s._v("793")]),t("br"),t("span",{staticClass:"line-number"},[s._v("794")]),t("br"),t("span",{staticClass:"line-number"},[s._v("795")]),t("br"),t("span",{staticClass:"line-number"},[s._v("796")]),t("br"),t("span",{staticClass:"line-number"},[s._v("797")]),t("br"),t("span",{staticClass:"line-number"},[s._v("798")]),t("br"),t("span",{staticClass:"line-number"},[s._v("799")]),t("br"),t("span",{staticClass:"line-number"},[s._v("800")]),t("br"),t("span",{staticClass:"line-number"},[s._v("801")]),t("br"),t("span",{staticClass:"line-number"},[s._v("802")]),t("br"),t("span",{staticClass:"line-number"},[s._v("803")]),t("br"),t("span",{staticClass:"line-number"},[s._v("804")]),t("br"),t("span",{staticClass:"line-number"},[s._v("805")]),t("br"),t("span",{staticClass:"line-number"},[s._v("806")]),t("br"),t("span",{staticClass:"line-number"},[s._v("807")]),t("br"),t("span",{staticClass:"line-number"},[s._v("808")]),t("br"),t("span",{staticClass:"line-number"},[s._v("809")]),t("br"),t("span",{staticClass:"line-number"},[s._v("810")]),t("br"),t("span",{staticClass:"line-number"},[s._v("811")]),t("br"),t("span",{staticClass:"line-number"},[s._v("812")]),t("br"),t("span",{staticClass:"line-number"},[s._v("813")]),t("br"),t("span",{staticClass:"line-number"},[s._v("814")]),t("br"),t("span",{staticClass:"line-number"},[s._v("815")]),t("br"),t("span",{staticClass:"line-number"},[s._v("816")]),t("br"),t("span",{staticClass:"line-number"},[s._v("817")]),t("br"),t("span",{staticClass:"line-number"},[s._v("818")]),t("br"),t("span",{staticClass:"line-number"},[s._v("819")]),t("br"),t("span",{staticClass:"line-number"},[s._v("820")]),t("br"),t("span",{staticClass:"line-number"},[s._v("821")]),t("br"),t("span",{staticClass:"line-number"},[s._v("822")]),t("br"),t("span",{staticClass:"line-number"},[s._v("823")]),t("br"),t("span",{staticClass:"line-number"},[s._v("824")]),t("br"),t("span",{staticClass:"line-number"},[s._v("825")]),t("br"),t("span",{staticClass:"line-number"},[s._v("826")]),t("br"),t("span",{staticClass:"line-number"},[s._v("827")]),t("br"),t("span",{staticClass:"line-number"},[s._v("828")]),t("br"),t("span",{staticClass:"line-number"},[s._v("829")]),t("br"),t("span",{staticClass:"line-number"},[s._v("830")]),t("br"),t("span",{staticClass:"line-number"},[s._v("831")]),t("br"),t("span",{staticClass:"line-number"},[s._v("832")]),t("br"),t("span",{staticClass:"line-number"},[s._v("833")]),t("br"),t("span",{staticClass:"line-number"},[s._v("834")]),t("br"),t("span",{staticClass:"line-number"},[s._v("835")]),t("br"),t("span",{staticClass:"line-number"},[s._v("836")]),t("br"),t("span",{staticClass:"line-number"},[s._v("837")]),t("br"),t("span",{staticClass:"line-number"},[s._v("838")]),t("br"),t("span",{staticClass:"line-number"},[s._v("839")]),t("br"),t("span",{staticClass:"line-number"},[s._v("840")]),t("br"),t("span",{staticClass:"line-number"},[s._v("841")]),t("br"),t("span",{staticClass:"line-number"},[s._v("842")]),t("br"),t("span",{staticClass:"line-number"},[s._v("843")]),t("br"),t("span",{staticClass:"line-number"},[s._v("844")]),t("br"),t("span",{staticClass:"line-number"},[s._v("845")]),t("br"),t("span",{staticClass:"line-number"},[s._v("846")]),t("br"),t("span",{staticClass:"line-number"},[s._v("847")]),t("br"),t("span",{staticClass:"line-number"},[s._v("848")]),t("br"),t("span",{staticClass:"line-number"},[s._v("849")]),t("br"),t("span",{staticClass:"line-number"},[s._v("850")]),t("br"),t("span",{staticClass:"line-number"},[s._v("851")]),t("br"),t("span",{staticClass:"line-number"},[s._v("852")]),t("br"),t("span",{staticClass:"line-number"},[s._v("853")]),t("br"),t("span",{staticClass:"line-number"},[s._v("854")]),t("br"),t("span",{staticClass:"line-number"},[s._v("855")]),t("br"),t("span",{staticClass:"line-number"},[s._v("856")]),t("br"),t("span",{staticClass:"line-number"},[s._v("857")]),t("br"),t("span",{staticClass:"line-number"},[s._v("858")]),t("br"),t("span",{staticClass:"line-number"},[s._v("859")]),t("br"),t("span",{staticClass:"line-number"},[s._v("860")]),t("br"),t("span",{staticClass:"line-number"},[s._v("861")]),t("br"),t("span",{staticClass:"line-number"},[s._v("862")]),t("br"),t("span",{staticClass:"line-number"},[s._v("863")]),t("br"),t("span",{staticClass:"line-number"},[s._v("864")]),t("br"),t("span",{staticClass:"line-number"},[s._v("865")]),t("br"),t("span",{staticClass:"line-number"},[s._v("866")]),t("br"),t("span",{staticClass:"line-number"},[s._v("867")]),t("br"),t("span",{staticClass:"line-number"},[s._v("868")]),t("br"),t("span",{staticClass:"line-number"},[s._v("869")]),t("br"),t("span",{staticClass:"line-number"},[s._v("870")]),t("br"),t("span",{staticClass:"line-number"},[s._v("871")]),t("br"),t("span",{staticClass:"line-number"},[s._v("872")]),t("br"),t("span",{staticClass:"line-number"},[s._v("873")]),t("br"),t("span",{staticClass:"line-number"},[s._v("874")]),t("br"),t("span",{staticClass:"line-number"},[s._v("875")]),t("br"),t("span",{staticClass:"line-number"},[s._v("876")]),t("br"),t("span",{staticClass:"line-number"},[s._v("877")]),t("br"),t("span",{staticClass:"line-number"},[s._v("878")]),t("br"),t("span",{staticClass:"line-number"},[s._v("879")]),t("br"),t("span",{staticClass:"line-number"},[s._v("880")]),t("br"),t("span",{staticClass:"line-number"},[s._v("881")]),t("br"),t("span",{staticClass:"line-number"},[s._v("882")]),t("br"),t("span",{staticClass:"line-number"},[s._v("883")]),t("br"),t("span",{staticClass:"line-number"},[s._v("884")]),t("br"),t("span",{staticClass:"line-number"},[s._v("885")]),t("br"),t("span",{staticClass:"line-number"},[s._v("886")]),t("br"),t("span",{staticClass:"line-number"},[s._v("887")]),t("br"),t("span",{staticClass:"line-number"},[s._v("888")]),t("br"),t("span",{staticClass:"line-number"},[s._v("889")]),t("br"),t("span",{staticClass:"line-number"},[s._v("890")]),t("br"),t("span",{staticClass:"line-number"},[s._v("891")]),t("br"),t("span",{staticClass:"line-number"},[s._v("892")]),t("br"),t("span",{staticClass:"line-number"},[s._v("893")]),t("br"),t("span",{staticClass:"line-number"},[s._v("894")]),t("br"),t("span",{staticClass:"line-number"},[s._v("895")]),t("br"),t("span",{staticClass:"line-number"},[s._v("896")]),t("br"),t("span",{staticClass:"line-number"},[s._v("897")]),t("br"),t("span",{staticClass:"line-number"},[s._v("898")]),t("br"),t("span",{staticClass:"line-number"},[s._v("899")]),t("br"),t("span",{staticClass:"line-number"},[s._v("900")]),t("br"),t("span",{staticClass:"line-number"},[s._v("901")]),t("br"),t("span",{staticClass:"line-number"},[s._v("902")]),t("br"),t("span",{staticClass:"line-number"},[s._v("903")]),t("br"),t("span",{staticClass:"line-number"},[s._v("904")]),t("br"),t("span",{staticClass:"line-number"},[s._v("905")]),t("br"),t("span",{staticClass:"line-number"},[s._v("906")]),t("br"),t("span",{staticClass:"line-number"},[s._v("907")]),t("br"),t("span",{staticClass:"line-number"},[s._v("908")]),t("br"),t("span",{staticClass:"line-number"},[s._v("909")]),t("br"),t("span",{staticClass:"line-number"},[s._v("910")]),t("br"),t("span",{staticClass:"line-number"},[s._v("911")]),t("br"),t("span",{staticClass:"line-number"},[s._v("912")]),t("br"),t("span",{staticClass:"line-number"},[s._v("913")]),t("br"),t("span",{staticClass:"line-number"},[s._v("914")]),t("br"),t("span",{staticClass:"line-number"},[s._v("915")]),t("br"),t("span",{staticClass:"line-number"},[s._v("916")]),t("br"),t("span",{staticClass:"line-number"},[s._v("917")]),t("br"),t("span",{staticClass:"line-number"},[s._v("918")]),t("br"),t("span",{staticClass:"line-number"},[s._v("919")]),t("br"),t("span",{staticClass:"line-number"},[s._v("920")]),t("br"),t("span",{staticClass:"line-number"},[s._v("921")]),t("br"),t("span",{staticClass:"line-number"},[s._v("922")]),t("br"),t("span",{staticClass:"line-number"},[s._v("923")]),t("br"),t("span",{staticClass:"line-number"},[s._v("924")]),t("br"),t("span",{staticClass:"line-number"},[s._v("925")]),t("br"),t("span",{staticClass:"line-number"},[s._v("926")]),t("br"),t("span",{staticClass:"line-number"},[s._v("927")]),t("br"),t("span",{staticClass:"line-number"},[s._v("928")]),t("br"),t("span",{staticClass:"line-number"},[s._v("929")]),t("br"),t("span",{staticClass:"line-number"},[s._v("930")]),t("br"),t("span",{staticClass:"line-number"},[s._v("931")]),t("br"),t("span",{staticClass:"line-number"},[s._v("932")]),t("br"),t("span",{staticClass:"line-number"},[s._v("933")]),t("br"),t("span",{staticClass:"line-number"},[s._v("934")]),t("br"),t("span",{staticClass:"line-number"},[s._v("935")]),t("br"),t("span",{staticClass:"line-number"},[s._v("936")]),t("br"),t("span",{staticClass:"line-number"},[s._v("937")]),t("br"),t("span",{staticClass:"line-number"},[s._v("938")]),t("br"),t("span",{staticClass:"line-number"},[s._v("939")]),t("br"),t("span",{staticClass:"line-number"},[s._v("940")]),t("br"),t("span",{staticClass:"line-number"},[s._v("941")]),t("br"),t("span",{staticClass:"line-number"},[s._v("942")]),t("br"),t("span",{staticClass:"line-number"},[s._v("943")]),t("br"),t("span",{staticClass:"line-number"},[s._v("944")]),t("br"),t("span",{staticClass:"line-number"},[s._v("945")]),t("br"),t("span",{staticClass:"line-number"},[s._v("946")]),t("br"),t("span",{staticClass:"line-number"},[s._v("947")]),t("br"),t("span",{staticClass:"line-number"},[s._v("948")]),t("br"),t("span",{staticClass:"line-number"},[s._v("949")]),t("br"),t("span",{staticClass:"line-number"},[s._v("950")]),t("br"),t("span",{staticClass:"line-number"},[s._v("951")]),t("br"),t("span",{staticClass:"line-number"},[s._v("952")]),t("br"),t("span",{staticClass:"line-number"},[s._v("953")]),t("br"),t("span",{staticClass:"line-number"},[s._v("954")]),t("br"),t("span",{staticClass:"line-number"},[s._v("955")]),t("br"),t("span",{staticClass:"line-number"},[s._v("956")]),t("br"),t("span",{staticClass:"line-number"},[s._v("957")]),t("br"),t("span",{staticClass:"line-number"},[s._v("958")]),t("br"),t("span",{staticClass:"line-number"},[s._v("959")]),t("br"),t("span",{staticClass:"line-number"},[s._v("960")]),t("br"),t("span",{staticClass:"line-number"},[s._v("961")]),t("br"),t("span",{staticClass:"line-number"},[s._v("962")]),t("br"),t("span",{staticClass:"line-number"},[s._v("963")]),t("br"),t("span",{staticClass:"line-number"},[s._v("964")]),t("br"),t("span",{staticClass:"line-number"},[s._v("965")]),t("br"),t("span",{staticClass:"line-number"},[s._v("966")]),t("br"),t("span",{staticClass:"line-number"},[s._v("967")]),t("br"),t("span",{staticClass:"line-number"},[s._v("968")]),t("br"),t("span",{staticClass:"line-number"},[s._v("969")]),t("br"),t("span",{staticClass:"line-number"},[s._v("970")]),t("br"),t("span",{staticClass:"line-number"},[s._v("971")]),t("br"),t("span",{staticClass:"line-number"},[s._v("972")]),t("br"),t("span",{staticClass:"line-number"},[s._v("973")]),t("br"),t("span",{staticClass:"line-number"},[s._v("974")]),t("br"),t("span",{staticClass:"line-number"},[s._v("975")]),t("br"),t("span",{staticClass:"line-number"},[s._v("976")]),t("br"),t("span",{staticClass:"line-number"},[s._v("977")]),t("br"),t("span",{staticClass:"line-number"},[s._v("978")]),t("br"),t("span",{staticClass:"line-number"},[s._v("979")]),t("br"),t("span",{staticClass:"line-number"},[s._v("980")]),t("br"),t("span",{staticClass:"line-number"},[s._v("981")]),t("br"),t("span",{staticClass:"line-number"},[s._v("982")]),t("br"),t("span",{staticClass:"line-number"},[s._v("983")]),t("br"),t("span",{staticClass:"line-number"},[s._v("984")]),t("br"),t("span",{staticClass:"line-number"},[s._v("985")]),t("br"),t("span",{staticClass:"line-number"},[s._v("986")]),t("br"),t("span",{staticClass:"line-number"},[s._v("987")]),t("br"),t("span",{staticClass:"line-number"},[s._v("988")]),t("br"),t("span",{staticClass:"line-number"},[s._v("989")]),t("br")])])])}),[],!1,null,null,null);t.default=e.exports}}]);